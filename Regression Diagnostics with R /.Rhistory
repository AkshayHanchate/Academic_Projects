library(readr)
AmesHousing_1 <- read_csv("~/Downloads/AmesHousing-1.csv")
View(AmesHousing_1)
View(AmesHousing_1)
test = read.csv(AmesHousing_1.csv)
#Akshay Hanchate
library(janitor)
library(dplyr)
library(ggplot2)
library(plotly)
library(zoo)
library(scales)
df_ameshousing = read.csv("AmesHousing-1.csv")
#starting with EDA
#lets get the summary statistics
summary(df_ameshousing)
#lets get the structure of the data to check the imp variables and datatypes
str(df_ameshousing)
#missing check
colSums(is.na(df_ameshousing))
#in R sometimes empty string is not considered in missing value, so we convert empty string to NA and check the missing count again
df_ameshousing[df_ameshousing == ''] = NA
missing_values = colSums(is.na(df_ameshousing))
#calculating summary with percentage for better understanding
missing_percentage = round((missing_values / nrow(df_ameshousing)) * 100,2)
View(missing_percentage)
#handling missing values
#Apart from these two function rest all are categorical function, NA means that feature being not applicable
df_ameshousing$Lot.Frontage = na.aggregate(df_ameshousing$Lot.Frontage, FUN = mean)
df_ameshousing$Mas.Vnr.Area = na.aggregate(df_ameshousing$Mas.Vnr.Area, FUN = mean)
#to find out correlation lets create a subset containing only numeric values
df_numeric = df_ameshousing[,sapply(df_ameshousing,is.numeric)]
#to cross-check if we have any numerical missing values
colSums(is.na(df_numeric))
#lets convert these misssing values to 0 because their independent categorical variable is 0
columns_to_replace = c('BsmtFin.SF.1','BsmtFin.SF.2','Bsmt.Unf.SF','Total.Bsmt.SF','Bsmt.Full.Bath','Bsmt.Half.Bath','Garage.Yr.Blt','Garage.Cars','Garage.Area')
for (col in columns_to_replace) {
df_numeric[[col]] = replace(df_numeric[[col]], is.na(df_numeric[[col]]), 0)
}
corr_matrix = cor(df_numeric)
# Reshape data for ggplot
library(reshape2)
data_long <- melt(cor(df_numeric), na.rm = TRUE)
# Create ggplot
ggplot(data_long, aes(x = Var1, y = Var2, fill = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(-1, 1), space = "Lab", name = "Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 8, hjust = 1))
corr_matrix = cor(df_numeric)
View(corr_matrix)
